import numpy as np
import pandas as pd
import statsmodels
from statsmodels.tsa.stattools import adfuller
import warnings
from pandas import Series
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
warnings.filterwarnings("ignore")
df = pd.read_csv("C:\\Users\\Samir Prasun\\Desktop\\production forecasting\\Avg-Well-Rates.csv")
oil_rate=df.Oil_Prod_Rate.values


# evaluate an ARIMA model for a given order (p,d,q)
def evaluate_arima_model(X, arima_order):
    # prepare training dataset

    train_size = int(len(X) * 0.7)
    train, test = X[0:train_size], X[train_size:]
    history = [x for x in train]
    # make predictions
    predictions = list()
    for t in range(len(test)):
        model = ARIMA(history, order=arima_order)
        model_fit = model.fit(disp=0)
        yhat = model_fit.forecast()[0]
        predictions.append(yhat)
        history.append(test[t])
    # calculate out of sample error
    error = mean_squared_error(test, predictions)
    return error

# evaluate combinations of p, d and q values for an ARIMA model
def evaluate_models(dataset, p_values, d_values, q_values):
    dataset = dataset.astype('float32')
    best_score, best_cfg = float("inf"), None
    for p in p_values:
        for d in d_values:
            for q in q_values:
                order = (p,d,q)
                try:
                    mse = evaluate_arima_model(dataset, order)
                    if mse < best_score:
                        best_score, best_cfg = mse, order
                    print('ARIMA%s MSE=%.3f' % (order,mse))
                except:
                    continue
    print('Best ARIMA%s MSE=%.3f' % (best_cfg, best_score))

# load dataset

# evaluate parameters
# p_values = [0, 1, 2, 4, 6, 8, 10]
 # d_values = range(0, 2)
# q_values = range(0, 2)
p_values = [0, 1]
d_values = range(0, 1)
q_values = range(0, 1)
warnings.filterwarnings("ignore")
evaluate_models(oil_rate, p_values, d_values, q_values)

train_size = int(len(oil_rate) * 0.7)
train, test = oil_rate[0:train_size], oil_rate[train_size:]
history = [x for x in train]
    # make predictions
predictions = list()
for t in range(len(test)):
    model = ARIMA(history, order=(1,1,0))
    model_fit = model.fit(disp=0)
    yhat = model_fit.forecast()[0]
    predictions.append(yhat)
    history.append(test[t])
    
error = mean_squared_error(test, predictions)
print (error)
##train_predict = model_fit.predict(train)


##test_predict_new=scaler.inverse_transform(test_predict)


##train_predict_new = scaler.inverse_transform(train_predict)



plt.figure(figsize=(10,6))
plt.plot(test, color='blue', label='Actual')
plt.plot(predictions, color='red', label='Predicted data')
plt.title('Oil Rate Testing')
plt.xlabel('Date')
plt.ylabel('Oil_production_rate')
plt.legend()
plt.show()
